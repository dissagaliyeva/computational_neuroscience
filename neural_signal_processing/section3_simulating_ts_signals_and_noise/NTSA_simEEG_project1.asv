%%
%     COURSE: Solved challenges in neural time series analysis
%    SECTION: Simulating EEG data
%      VIDEO: Project 1: Channel-level EEG data
% Instructor: sincxpress.com
%
%%

%%% INSTRUCTIONS:
% The goal of this assignment is to simulate time series data
% that can be used to test time-series analysis methods.
% For each section below: 
%   1) Complete the MATLAB code
%   2) Put the data into the EEG structure
%      - Make sure all relevant fields are accurate (EEG.data, EEG.pnts, EEG.trials, EEG.srate, EEG.nbchan, EEG.times)
%   3) Use function plot_simEEG to plot some data

%% 1) pure phase-locked sine wave

% parameters
EEG.srate  = 500; % sampling rate in Hz
EEG.pnts   = 1500;
EEG.trials = 30;
EEG.nbchan = 23;

sinefreq = 6.75; % in Hz

% time vector
EEG.times = (0:EEG.pnts-1)/EEG.srate;

EEG.data = zeros([EEG.nbchan, EEG.pnts, EEG.trials]);

% loop over channels and create data
for chan = 1:EEG.nbchan
    for trial = 1:EEG.trials
        EEG.data(chan, :, trial) = sin(2*pi*sinefreq*EEG.times);
    end
end


% plot an ERP from one channel
figure(1), clf
plot(EEG.times,squeeze(mean(EEG.data(10,:,:),3)),'linew',2)
xlabel('Time (s)'), ylabel('Activity')
title('ERP from channel 10')


% the function below takes at least one argument (EEG),
% and optionally a second argument (channel number),
% and optionally a third argument (figure number)
plot_simEEG(EEG,2,2)

%% 2) Non-phase-locked sine wave

% hint: copy/paste the code above but add something inside the sine 
%       function on each trial.

EEG.data = zeros([EEG.nbchan, EEG.pnts, EEG.trials]);

% loop over channels and create data
for chan = 1:EEG.nbchan
    for trial = 1:EEG.trials
        EEG.data(chan, :, trial) = sin(2*pi*sinefreq*EEG.times + 2*pi/2*randn);
    end
end


% the function below takes at least one argument (EEG),
% and optionally a second argument (channel number),
% and optionally a third argument (figure number)
plot_simEEG(EEG,2,3)
plot_simEEG(EEG, 10, 4)

%% 3) multisine waves

% list of frequencies and corresponding amplitudes
frex = [ 3 5 16 ];
amps = [ 2 4 5  ];

sinewave = zeros(length(frex), length(EEG.times));

% loop over channels and trials
for chani=1:EEG.nbchan
    for triali=1:EEG.trials
        
         for idx = 1:length(frex)
             sinewave(idx, :) = amps(idx) * sin(2 * pi * frex(idx) * EEG.times);
         end
        
        % sinewave = sum(amps) * sin(2 * pi * sum(frex) * EEG.times)

        % data as a sine wave plus noise
        EEG.data(chani,:,triali) = sum(sinewave);
    end
end

plot_simEEG(EEG, 12, 3)
plot_simEEG(EEG, 21, 4)

%% Question: What can you change in the code above to make the EEG
%             activity non-phase-locked over trials?

sinewave = zeros(length(frex), length(EEG.times));

% loop over channels and trials
for chani=1:EEG.nbchan
    for triali=1:EEG.trials
        
         for idx = 1:length(frex)
             sinewave(idx, :) = amps(idx) * sin(2 * pi * frex(idx) * EEG.times + 2*pi/3*randn);
         end
        
        % sinewave = sum(amps) * sin(2 * pi * sum(frex) * EEG.times)

        % data as a sine wave plus noise
        EEG.data(chani,:,triali) = sum(sinewave);
    end
end

plot_simEEG(EEG, 12, 3)
plot_simEEG(EEG, 21, 4)

%% What happens if frequencies get closer to each other -> get squashed together

% list of frequencies and corresponding amplitudes
frex = [ 3 9 15 ];
amps = [ 2 4 5  ];

sinewave = zeros(length(frex), length(EEG.times));

% loop over channels and trials
for chani=1:EEG.nbchan
    for triali=1:EEG.trials
        
         for idx = 1:length(frex)
             sinewave(idx, :) = amps(idx) * sin(2 * pi * frex(idx) * EEG.times + 2*pi/3*randn);
         end
        
        % sinewave = sum(amps) * sin(2 * pi * sum(frex) * EEG.times)

        % data as a sine wave plus noise
        EEG.data(chani,:,triali) = sum(sinewave);
    end
end

plot_simEEG(EEG, 12, 3)
colormap jet
colorbar
plot_simEEG(EEG, 21, 4)
colormap jet
colorbar

%%% Question: Which of the plots look different for phase-locked vs. non-phase-locked?
%             (Hint: plot them in different figures to facilitate comparison.)
%             Are you surprised about the differences?

%% 4) nonstationary sine waves: chirp

% hint: instantaneous frequency via interpolated random numbers
freqmod = 20*interp1(rand(1,10),linspace(1,10,EEG.pnts));
signal  = sin( 2*pi * ((EEG.times + cumsum(freqmod))/EEG.srate) );

figure(2)
subplot(211)
plot(EEG.times, freqmod, 'r', 'linew', 3)
xlabel('Time (s)')
ylabel('Frequency (Hz)')
title('Instantaneous frequency')

subplot(212)
plot(EEG.times, signal, 'k')
xlabel('Time (s)')
ylabel('Amplitude (a.u.)')
title('Signal (chirp)')


%% non-stationary sine wave with frequency domain to time domain

times = -2:1/EEG.srate:10;

ptime = 3;
ampl = 5;
fwhm = 3;

% Gaussian
gaus = ampl * exp(-(4 * log(2) * (times - ptime).^2) / fwhm^2);

winN = gaus ./ max(gaus);
midp = dsearchn(times', ptime);
pst5 = midp - 1 + dsearchn(gaus(midp:end)', .5);
pre5 = dsearchn(gaus(1:midp)', .5);
emp_fwhm = times(pst5) - times(pre5);

figure(1), hold on
plot(times, gaus, 'k', 'linew', 2)
plot(times([pre5 pst5]), gaus([pre5 pst5]), 'ro--', 'markerfacecolor', 'k')
plot(times([pre5 pst5]), [0 winN(pre5)], 'r:')
plot(times([pre5 pst5]), [0 winN(pst5)], 'r:')
title(['FWHM: ' num2str(fwhm) 's, empirical FWHM: ' num2str(emp_fwhm), 's'])
xlabel('Time (s)'), ylabel('Amplitude')


%% 5) transient oscillations w/ Gaussian


peaktime = 1; % seconds
width = .12;

gaus = exp( -(EEG.times-peaktime).^2 / (2*width^2) );

% then multiply the gaussian by a sine wave
sinewave = sin(2 * pi * sinefreq * EEG.times) .* gaus;

plot(EEG.times, sinewave)

%% 6) repeat #3 with white noise

% list of frequencies and corresponding amplitudes
frex = [ 3 5 16 ];
amps = [ 2 4 5  ];

sinewave = zeros(length(frex), length(EEG.times));

% loop over channels and trials
for chani=1:EEG.nbchan
    for triali=1:EEG.trials
        
         for idx = 1:length(frex)
             sinewave(idx, :) = amps(idx) * sin(2 * pi * frex(idx) * EEG.times);
         end
        
        % sinewave = sum(amps) * sin(2 * pi * sum(frex) * EEG.times)

        % data as a sine wave plus noise
        EEG.data(chani,:,triali) = sum(sinewave) + (randn(size(EEG.times)) * frex(1) + amps(1));
    end
end

plot_simEEG(EEG, 12, 3)
plot_simEEG(EEG, 21, 4)



%% 7) repeat #5 with 1/f noise

peaktime = 1; % seconds
width = .12;

gaus = exp( -(EEG.times-peaktime).^2 / (2*width^2) );

% generate 1/f amplitude
ed = 50; % exponential decay -> defines how the amplitude function goes down
as = rand(1, ceil((length(EEG.times)) / 2) - ) .* exp(-(1:ceil((length(EEG.times))/2) - 1) / ed);
as = [as(1) as 0 0 as(:, end:-1:1)];

% Fourier coefficient
fc = as .* exp(1i * 2 * pi * rand(size(as)));

% inverse Fourier transform to create noise
noise = real(ifft(fc)) * pnts;

% then multiply the gaussian by a sine wave
sinewave = sin(2 * pi * sinefreq * EEG.times + noise) .* gaus ;

plot(EEG.times, sinewave)





%%

